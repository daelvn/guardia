{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gu\u00e0rdia 2 - Function guards for Lua & MoonScript Gu\u00e0rdia is a small library in hopes of obsoleting guard.lua , which is pretty old already if you ask me. This one, to nobody's surprise, is curried and focused on MoonScript, but hey, you're stil free to use it in Lua. Installation $ luarocks install guardia Documentation You can find the documentation over here. Changelog If you don't want to have to change all of your code, guardia.v2 provides replacements written using the new terms, so no need to worry about that. Functions are now defined in an actually compositive manner. Usage _pass / _finalize _ps true, 5 -- 5 _filter _isString = _fl (x) -> \"string\" == type x _id = (x) -> x id = (x) -> id _fn _isString x _transform _toString = _tr tostring _id = (x) -> x id = (x) -> id _ps _toString (_fl->true) x _status _isString = _fl (x) -> \"string\" == type x print _st _isString 5 -- false _negate _isString = _fl (x) -> \"string\" == type x print _st _ng _isString 5 -- true _error _isString = _fl (x) -> \"string\" == type x _ex = _er \"argument is not a string!\" _ex _isString 6 -- Error! argument is not a string! _e1 _isString = _fl (x) -> \"string\" == type x _e1 _isString 6 -- guardia $ filter did not pass! _default print _fn (_df 5) nil -- 5 print _fm (_df 5) 4 -- 4 License I'm throwing this, as always, to the public domain, do what you want with it. Maintainer Dael [daelvn@gmail.com] Goodbye? goodbye.","title":"Home"},{"location":"#guardia-2-function-guards-for-lua-moonscript","text":"Gu\u00e0rdia is a small library in hopes of obsoleting guard.lua , which is pretty old already if you ask me. This one, to nobody's surprise, is curried and focused on MoonScript, but hey, you're stil free to use it in Lua.","title":"Gu\u00e0rdia 2 - Function guards for Lua &amp; MoonScript"},{"location":"#installation","text":"$ luarocks install guardia","title":"Installation"},{"location":"#documentation","text":"You can find the documentation over here.","title":"Documentation"},{"location":"#changelog","text":"If you don't want to have to change all of your code, guardia.v2 provides replacements written using the new terms, so no need to worry about that. Functions are now defined in an actually compositive manner.","title":"Changelog"},{"location":"#usage","text":"","title":"Usage"},{"location":"#95pass-95finalize","text":"_ps true, 5 -- 5","title":"_pass / _finalize"},{"location":"#95filter","text":"_isString = _fl (x) -> \"string\" == type x _id = (x) -> x id = (x) -> id _fn _isString x","title":"_filter"},{"location":"#95transform","text":"_toString = _tr tostring _id = (x) -> x id = (x) -> id _ps _toString (_fl->true) x","title":"_transform"},{"location":"#95status","text":"_isString = _fl (x) -> \"string\" == type x print _st _isString 5 -- false","title":"_status"},{"location":"#95negate","text":"_isString = _fl (x) -> \"string\" == type x print _st _ng _isString 5 -- true","title":"_negate"},{"location":"#95error","text":"_isString = _fl (x) -> \"string\" == type x _ex = _er \"argument is not a string!\" _ex _isString 6 -- Error! argument is not a string!","title":"_error"},{"location":"#95e1","text":"_isString = _fl (x) -> \"string\" == type x _e1 _isString 6 -- guardia $ filter did not pass!","title":"_e1"},{"location":"#95default","text":"print _fn (_df 5) nil -- 5 print _fm (_df 5) 4 -- 4","title":"_default"},{"location":"#license","text":"I'm throwing this, as always, to the public domain, do what you want with it.","title":"License"},{"location":"#maintainer","text":"Dael [daelvn@gmail.com]","title":"Maintainer"},{"location":"#goodbye","text":"goodbye.","title":"Goodbye?"},{"location":"guardia.config/","text":"","title":"Guardia.config"},{"location":"guardia.guards/","text":"","title":"Guardia.guards"},{"location":"guardia.init/","text":"","title":"Guardia.init"},{"location":"guardia.v2.guards/","text":"guardia.v2.guards Set of guards that come with Gu\u00e0rdia. Batteries included! Importing _<type> from this module will return a type guard for <type> . Importing _not_<type> from this module will return a negated type guard for <type> . _utype source Underlying type checker for _type , also supporting the __type metafield for custom types. _type source Type-checking source guard. Has to be manually finalized with _ps . _utable source Underlying table checker for _tableof _tableof source Guard that checks that all elements of a table are of the same type. _tostring source tostring transformer guard. _tonumber source tonumber transformer guard.","title":"guardia.v2.guards"},{"location":"guardia.v2.guards/#guardiav2guards","text":"Set of guards that come with Gu\u00e0rdia. Batteries included! Importing _<type> from this module will return a type guard for <type> . Importing _not_<type> from this module will return a negated type guard for <type> .","title":"guardia.v2.guards"},{"location":"guardia.v2.guards/#_utype","text":"source Underlying type checker for _type , also supporting the __type metafield for custom types.","title":"_utype"},{"location":"guardia.v2.guards/#_type","text":"source Type-checking source guard. Has to be manually finalized with _ps .","title":"_type"},{"location":"guardia.v2.guards/#_utable","text":"source Underlying table checker for _tableof","title":"_utable"},{"location":"guardia.v2.guards/#_tableof","text":"source Guard that checks that all elements of a table are of the same type.","title":"_tableof"},{"location":"guardia.v2.guards/#_tostring","text":"source tostring transformer guard.","title":"_tostring"},{"location":"guardia.v2.guards/#_tonumber","text":"source tonumber transformer guard.","title":"_tonumber"},{"location":"guardia.v2.init/","text":"guardia.v2.init Guards for Lua. Based upon guard.lua . This version is rather thought for curried functions and use with MoonScript. Sources Sources are functions that take a set of values and start a guard chain. They're always of the kind (...) -> boolean, ... . _filter source Alias \u2192 _fl Filtering function. If the filter passes, the first returned value is true , false otherwise. _true source Alias \u2192 _t Starts a chain, always returning true . _false source Alias \u2192 _f Starts a chain, always returning false . _default source Alias \u2192 _df Makes the value of the chain a only if ... is nil . Transformers Transformers are functions which continue a chain, also modifying the arguments that go along with the boolean. They're always of the kind (boolean, ...) -> boolean, ... . _transform source Alias \u2192 _tr Transforms the values being passed through a function, only if the boolean passed is true . _negate source Alias \u2192 _ng Negates the status from last operation. _error source Alias \u2192 _er Raises \u2192 Error message passed to the function (if boolean is false ). Errors with msg if the status is true . _e1 source Raises \u2192 \"guardia $ chain was stopped\" Predefined error for _error . _inspect source Alias \u2192 _in Prints an inspect count number and every value on the chain, including the boolean. _named source Alias \u2192 _ci Complex inspect. Instead of the inspect count number, prints the message along with every value on the chain and the status. Finalizers Finalizers are functions that end a guard chain, returning only part of the values. Their form can either be (boolean, ...) -> boolean or (boolean, ...) -> ... . _pass source Alias \u2192 _ps , _fn Ignores the boolean and returns the varargs. _status source Alias \u2192 _st Returns the status from the chain and nothing else. v1 Guards These guards are v1 replicas made using the new guard functions. They are the closest to the original guard.lua . Most of them take the form (function) -> (function) -> (function) -> (...) -> ... . Guard source Uses a filter and transformer function on a set of values passed to f . Antiguard source Equivalent to Guard , but negates the results of fl . Biguard source Essentially a mix of Guard and Antiguard , so the transformer tr runs when the filter passes, ar otherwise. Endguard source A guard for the result values of the function f called with ... . Errguard source Guard but errors if the filter does not pass. Enderrguard source Endguard but errors if the filter does not pass. Antierrguard source Antiguard but errors if the filter does not pass.","title":"guardia.v2.init"},{"location":"guardia.v2.init/#guardiav2init","text":"Guards for Lua. Based upon guard.lua . This version is rather thought for curried functions and use with MoonScript.","title":"guardia.v2.init"},{"location":"guardia.v2.init/#sources","text":"Sources are functions that take a set of values and start a guard chain. They're always of the kind (...) -> boolean, ... .","title":"Sources"},{"location":"guardia.v2.init/#_filter","text":"source Alias \u2192 _fl Filtering function. If the filter passes, the first returned value is true , false otherwise.","title":"_filter"},{"location":"guardia.v2.init/#_true","text":"source Alias \u2192 _t Starts a chain, always returning true .","title":"_true"},{"location":"guardia.v2.init/#_false","text":"source Alias \u2192 _f Starts a chain, always returning false .","title":"_false"},{"location":"guardia.v2.init/#_default","text":"source Alias \u2192 _df Makes the value of the chain a only if ... is nil .","title":"_default"},{"location":"guardia.v2.init/#transformers","text":"Transformers are functions which continue a chain, also modifying the arguments that go along with the boolean. They're always of the kind (boolean, ...) -> boolean, ... .","title":"Transformers"},{"location":"guardia.v2.init/#_transform","text":"source Alias \u2192 _tr Transforms the values being passed through a function, only if the boolean passed is true .","title":"_transform"},{"location":"guardia.v2.init/#_negate","text":"source Alias \u2192 _ng Negates the status from last operation.","title":"_negate"},{"location":"guardia.v2.init/#_error","text":"source Alias \u2192 _er Raises \u2192 Error message passed to the function (if boolean is false ). Errors with msg if the status is true .","title":"_error"},{"location":"guardia.v2.init/#_e1","text":"source Raises \u2192 \"guardia $ chain was stopped\" Predefined error for _error .","title":"_e1"},{"location":"guardia.v2.init/#_inspect","text":"source Alias \u2192 _in Prints an inspect count number and every value on the chain, including the boolean.","title":"_inspect"},{"location":"guardia.v2.init/#_named","text":"source Alias \u2192 _ci Complex inspect. Instead of the inspect count number, prints the message along with every value on the chain and the status.","title":"_named"},{"location":"guardia.v2.init/#finalizers","text":"Finalizers are functions that end a guard chain, returning only part of the values. Their form can either be (boolean, ...) -> boolean or (boolean, ...) -> ... .","title":"Finalizers"},{"location":"guardia.v2.init/#_pass","text":"source Alias \u2192 _ps , _fn Ignores the boolean and returns the varargs.","title":"_pass"},{"location":"guardia.v2.init/#_status","text":"source Alias \u2192 _st Returns the status from the chain and nothing else.","title":"_status"},{"location":"guardia.v2.init/#v1-guards","text":"These guards are v1 replicas made using the new guard functions. They are the closest to the original guard.lua . Most of them take the form (function) -> (function) -> (function) -> (...) -> ... .","title":"v1 Guards"},{"location":"guardia.v2.init/#guard","text":"source Uses a filter and transformer function on a set of values passed to f .","title":"Guard"},{"location":"guardia.v2.init/#antiguard","text":"source Equivalent to Guard , but negates the results of fl .","title":"Antiguard"},{"location":"guardia.v2.init/#biguard","text":"source Essentially a mix of Guard and Antiguard , so the transformer tr runs when the filter passes, ar otherwise.","title":"Biguard"},{"location":"guardia.v2.init/#endguard","text":"source A guard for the result values of the function f called with ... .","title":"Endguard"},{"location":"guardia.v2.init/#errguard","text":"source Guard but errors if the filter does not pass.","title":"Errguard"},{"location":"guardia.v2.init/#enderrguard","text":"source Endguard but errors if the filter does not pass.","title":"Enderrguard"},{"location":"guardia.v2.init/#antierrguard","text":"source Antiguard but errors if the filter does not pass.","title":"Antierrguard"}]}